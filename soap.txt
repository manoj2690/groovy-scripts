==============================  Separate project  - Controller Script ============================================

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import com.eviware.soapui.support.*;
import java.util.*;
import jxl.*;
import java.lang.*;
import jxl.*
import jxl.write.*
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import com.eviware.soapui.model.project.ProjectFactoryRegistry
import com.eviware.soapui.impl.wsdl.WsdlProjectFactory

import com.eviware.soapui.impl.wsdl.*
import com.eviware.soapui.impl.WsdlInterfaceFactory


def Result_Excel_path = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("Result_Excel_path")
log.info("Results path = "+Result_Excel_path)
def Test_Execution_Data_excel_path = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "Test_Execution_Data_excel_path" )
log.info("Test Execution Data path = "+Test_Execution_Data_excel_path)

 String  service_name
 String  ts_name
 String  tc_name
 
 def projectname
 def  td_cell_val
 def serviceType 
 def wsdlUrl
 def endPointUrl
 HSSFRow runconfig_row
 
com.eviware.soapui.model.propertyexpansion.PropertyExpansionUtils.globalProperties['flag_for_fail'].value = 'PASS'

//----------to Create Report file for soap result
String reportPath =Result_Excel_path +"Test_Result.xls";
HSSFWorkbook result_workbook = new HSSFWorkbook();
HSSFSheet result_sheet = result_workbook.createSheet("Automation Result of VPC");
HSSFRow headingRow = result_sheet.createRow((short) 0);
headingRow.createCell((short) 0).setCellValue("Project Name");
headingRow.createCell((short) 1).setCellValue("TestSuit Name");
headingRow.createCell((short) 2).setCellValue("Test Case Name");
headingRow.createCell((short) 3).setCellValue("Test Case ID");
headingRow.createCell((short) 4).setCellValue("Test Status");
//headingRow.createCell((short) 5).setCellValue("Total Time");
headingRow.createCell((short) 5).setCellValue("Executed Time");
headingRow.createCell((short) 6).setCellValue("Total Assertions");
headingRow.createCell((short) 7).setCellValue("Passed Assertions");
headingRow.createCell((short) 8).setCellValue("Failed Assertions");

HSSFCellStyle cellStyle= result_workbook.createCellStyle();
HSSFFont font = result_workbook.createFont();        
font.setColor(HSSFColor.WHITE.index);
font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
font.setFontHeightInPoints((short)14);
font.setFontName("Calibri");
cellStyle.setFont(font);
cellStyle.setFillForegroundColor(HSSFColor.LIGHT_BLUE.index);
cellStyle.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);

headingRow.getCell((short)0).setCellStyle(cellStyle);
headingRow.getCell((short)1).setCellStyle(cellStyle);
headingRow.getCell((short)2).setCellStyle(cellStyle);
headingRow.getCell((short)3).setCellStyle(cellStyle); 
headingRow.getCell((short)4).setCellStyle(cellStyle);
headingRow.getCell((short)5).setCellStyle(cellStyle);
headingRow.getCell((short)6).setCellStyle(cellStyle);
headingRow.getCell((short)7).setCellStyle(cellStyle);
headingRow.getCell((short)8).setCellStyle(cellStyle);
//headingRow.getCell((short)6).setCellStyle(cellStyle);

FileOutputStream fileOut = new FileOutputStream(reportPath);
result_workbook.write(fileOut);

fileOut.close();

//-----open excel Test_Execution_Data & read project,ts,tc,Exe mode -------
//FileInputStream fileInputStream = new FileInputStream("C:\\MASTER_REPO\\Data\\Excels\\Test_Execution_Data.xls");

FileInputStream fileInputStream = new FileInputStream(Test_Execution_Data_excel_path +"Test_Execution_Data.xls");
HSSFWorkbook TED_workbook = new HSSFWorkbook(fileInputStream);
HSSFSheet runconfig_worksheet = TED_workbook.getSheet("RunConfig");
// HSSFRow runconfig_row = runconfig_worksheet.getRow(1);
//serviceType =  runconfig_row.getCell((short) 0).getStringCellValue();
//wsdlUrl =  runconfig_row.getCell((short) 1).getNumericCellValue();
//endPointUrl =  runconfig_row.getCell((short) 2).getNumericCellValue();


HSSFSheet TED_worksheet = TED_workbook.getSheet("RunManager");
int rows = TED_worksheet.getPhysicalNumberOfRows();
log.info ("No of rows in run managger sheet - "+rows)
for (int i = 1; i <rows; i++) 
{

	log.info("iterastor count - "+ i)
  HSSFRow row = TED_worksheet.getRow(i);
  if (row != null)
  {
    if (row.getCell((short) 4).getStringCellValue().contains("Y")) 
    {
 		
 		service_name =  row.getCell((short) 0).getStringCellValue();
 		log.info ("Service name - "+service_name)
 		ts_name =  row.getCell((short) 1).getStringCellValue();
 		log.info ("Test suite name - "+ts_name)
 		tc_name =  row.getCell((short) 2).getStringCellValue();
 		log.info ("Test case name - "+tc_name)

		tc_id =  row.getCell((short) 3).getStringCellValue();
 		com.eviware.soapui.model.propertyexpansion.PropertyExpansionUtils.globalProperties['testCaseId'].value = tc_id
		com.eviware.soapui.model.propertyexpansion.PropertyExpansionUtils.globalProperties['testCaseName'].value = tc_name
 		
 		//service_name =  row.getCell((short) 3).getStringCellValue();
 		

//+++++++++++++++++++++++++  need to put logic for getting and passing service type from run config  +++++++++++++++++++++++++
	// ++++++++++  NEED TO PUT LOGIC TO OBTAIN ROW NUMBER BASED ON THE SERVICE TYPE +++++++++++++++++++++++++++++
//HSSFSheet result_sheet = TED_workbook.getSheet("RunConfig");
int rowCount = runconfig_worksheet.getPhysicalNumberOfRows();
log.info ("rowCount = " + rowCount)
def servTypeList = []
String servType
//String checkServ = "AccountEnquiryService2"
int rowIndex
for (int j =0; j<rowCount; j++)
{
	servType = runconfig_worksheet.getRow(j).getCell(0).getStringCellValue();
	servTypeList.push(servType);
	log.info servTypeList
}

if (servTypeList.contains(service_name))
{
rowIndex = servTypeList.indexOf(service_name)

log.info ("index of " + service_name + " = " + rowIndex)
}
else

log.info ("list doesn't contain serv Type")



		runconfig_row = runconfig_worksheet.getRow(rowIndex);
 		serviceType = runconfig_row.getCell((short) 0).getStringCellValue();
 		wsdlUrl = runconfig_row.getCell((short) 1).getStringCellValue();
 		endPointUrl = runconfig_row.getCell((short) 2).getStringCellValue();
 		
		//----------------------------------------------------------------------------
	// Load project 
			def workspace = testRunner.testCase.testSuite.project.workspace
//			def project =   workspace.createProject('Project2',new File('C:/Users/1559556/Desktop/Results/Projects')) 
//			WsdlInterfaceFactory.importWsdl(project, wsdlUrl, true)
			//log.info("workspace = " +workspace)
			def testProject 

						
  			//log.info("test project ="+testProject)  			
			if(workspace == null) {
				testProject = ProjectFactoryRegistry.getProjectFactory(WsdlProjectFactory.WSDL_TYPE).createNew("C:\\Project_Data\\Projects\\"+service_name+"-soapui-project.xml")
			log.info ("test project value with workspace null = " + testProject)
			}
  			else
  			{	testProject = workspace.getProjectByName(service_name) 	 

			log.info ("test project value = " + testProject)
  			}
			if(!testProject.open && workspace!=null)	
				workspace.openProject(testProject)
				
			// Setting endpoint URL for project dynamically
			log.info("End point url - "+endPointUrl)
			//testRunner.testCase.properties['endpoint'].setValue(endPointUrl)

			log.info ("Endpoint prop before setting = "+ testRunner.testCase.getPropertyValue( "endpoint" ))
			
			//testRunner.testCase.setPropertyValue("endpoint", endPointUrl)
			com.eviware.soapui.model.propertyexpansion.PropertyExpansionUtils.globalProperties['endpoint'].value = endPointUrl
			

			log.info ("Endpoint prop after setting = "+ testRunner.testCase.getPropertyValue( "endpoint" ))
			

		// ++++++++++++++++++++++++++++++  need to check how test case name is being set in the below line
			
		//.............removed may 03 testcase = testRunner.testCase.testSuite.project.getTestSuiteByName(ts_name)

		//.................removed may 03 	log.info ("testcase = " + testcase)

		// Run Test case
		//def slaveTestCase =testProject.getTestSuiteByName(ts_name).getTestCaseByName(tc_name)
//		slaveTestCase.run(new com.eviware.soapui.support.types.StringToObjectMap(), false)

		log.info ("testcase = " + tc_name)
		log.info ("testSuite = "+ts_name)

	//	def project = testRunner.getTestCase().testSuite.Project();
		def project = testRunner.getTestCase().getTestSuite().getProject().getWorkspace().getProjectByName(service_name);
		log.info project

		def tSuite =  project.getTestSuiteByName(ts_name)

		log.info ("test suite = " + tSuite)
		
		//--Define your testCase pointer
		def TC = tSuite.getTestCaseByName(tc_name)
		log.info ("test case = " + TC)

		//def testStep = TC.getName()

		//log.info ("test step = " + testStep)
		//--Define the external string object
		def properties = new com.eviware.soapui.support.types.StringToObjectMap ()
		def async = false
		//--run object string against TC
		TC.run (properties, async)

		//didn't work...................testRunner.testCase.testSteps[testStep].run(testRunner, context)

          log.info("iteration end")

//          testRunner.testCase.testSuite.project.removeProperty("projectname"); // removes the all properties of project_level
//		testRunner.testCase.testSuite.project.removeProperty("projectname");
//		testRunner.testCase.testSuite.removeProperty( "ts_name" ); // removes the all test suite level properties
//		testRunner.testCase.removeProperty( "tc_name" );


		// Removing set value from global preferences
		com.eviware.soapui.model.propertyexpansion.PropertyExpansionUtils.globalProperties['testCaseId'].value = null
		com.eviware.soapui.model.propertyexpansion.PropertyExpansionUtils.globalProperties['testCaseName'].value = null
		
	     }
	  }	
 	}



==============================================================================================================================================





==================================== Test case level - Setup script ====================================================


import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import com.eviware.soapui.support.*;
import java.util.*;
import jxl.*;
import java.lang.*;
import jxl.*
import jxl.write.*
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import com.eviware.soapui.model.project.ProjectFactoryRegistry
import com.eviware.soapui.impl.wsdl.WsdlProjectFactory
import com.eviware.soapui.impl.wsdl.*
import com.eviware.soapui.impl.WsdlInterfaceFactory


def tc_id = context.expand('${#Global#testCaseId}')
//def tc_id = "TC_Enquire_Positive_01";

log.info  tc_id;
def Test_Execution_Data_excel_path = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "Test_Execution_Data_excel_path" )
FileInputStream fileInputStream = new FileInputStream(Test_Execution_Data_excel_path +"Test_Execution_Data.xls");
HSSFWorkbook TED_workbook = new HSSFWorkbook(fileInputStream);
HSSFSheet testData_sheet = TED_workbook.getSheet("TestData");

int rowCount = testData_sheet.getPhysicalNumberOfRows();
log.info ("rowCount = " + rowCount)
def testCaselist = []
String testCaseId
int rowIndex
for (int j =0; j<rowCount; j++)
{
	testCaseId = testData_sheet.getRow(j).getCell((short) 0).getStringCellValue();
	testCaselist.push(testCaseId);
	//log.info servTypeList
}

if (testCaselist.contains(tc_id))
{
rowIndex = testCaselist.indexOf(tc_id)

log.info ("index of " + testCaseId + " = " + rowIndex)
}
else

log.info ("list doesn't contain tc id")



		data_fetch_row = testData_sheet.getRow(rowIndex);

		def countryCode = data_fetch_row.getCell((short) 1).getStringCellValue();
		def currencyCode = data_fetch_row.getCell((short) 2).getStringCellValue();
		def accountNumber = data_fetch_row.getCell((short) 3).getStringCellValue();

		log.info countryCode
		log.info currencyCode
		log.info accountNumber

		//def testSuiteVal = 
		
		testCase.testSuite.setPropertyValue( "countryCode", countryCode );
		testCase.testSuite.setPropertyValue( "currencyCode", currencyCode );
		testCase.testSuite.setPropertyValue( "accountNumber", accountNumber );




==========================================================================================================================================




============================================================== Test case level - tear down script ====================================================================



import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import com.eviware.soapui.support.*;
import java.util.*;
import jxl.*;
import java.lang.*;
import jxl.*
import jxl.write.*
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import com.eviware.soapui.model.project.ProjectFactoryRegistry
import com.eviware.soapui.impl.wsdl.WsdlProjectFactory
import com.eviware.soapui.impl.wsdl.*
import com.eviware.soapui.impl.WsdlInterfaceFactory



def tc_id = context.expand('${#Global#testCaseId}')
		//clearing test suite prop
		testCase.testSuite.setPropertyValue( "countryCode", "" );
		testCase.testSuite.setPropertyValue( "currencyCode", "" );
		testCase.testSuite.setPropertyValue( "accountNumber", "" );


// getting test csae status
def result
def String actual_status = testRunner.getStatus()
def stepName

String expected_status = "FINISHED"

log.info("actual_status" +actual_status)


	if ( expected_status == actual_status )
	{
		result = "PASSED"
		stepName = context.testCase.getTestStepAt(context.getCurrentStepIndex()-1).getLabel()
	}
	
	else {
		result = "FAILED"
		stepName = context.testCase.getTestStepAt(context.getCurrentStepIndex()).getLabel()
	}
	log.info ("stepName = " + stepName)


//write response to external file

def Result_Excel_path = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("Result_Excel_path")

String getRes = "\${" +stepName + "#Response}"
log.info getRes
def response = context.expand(getRes)
log.info Result_Excel_path

def f = new File(Result_Excel_path+"\\Responses\\"+tc_id+"_Response.xml")
f.write(response, "UTF-8")

//================================================ Report===========================================



//====================================================== Assertion validation ========================================
def assertionsList = testRunner.getTestCase().getTestStepByName(stepName).getAssertionList()

int totalAssertions = 0;
totalAssertions = assertionsList.size()

log.info ("totalAssertions = " + totalAssertions)
def iAssertionStatus
int assertionPassed = 0
int assertionFailed = 0
if (totalAssertions > 0 )
{

	log.info "entered if"

for (int k = 0; k<=totalAssertions-1; k++){

	 error = assertionsList[k].getErrors()

	log.info ("Assertion " + k + " label = " + assertionsList[k].LABEL)
	log.info ("Assertion " + k + " status = " + assertionsList[k].status)
	
	log.info ("Assertion " + k + " DESCRIPTION = " + assertionsList[k].DESCRIPTION)

	if (error != null)
	{
	log.info ("Assertion " + k + " error = " +error[0].getMessage())
	assertionFailed++
	} else {
	assertionPassed++	
	}
	log.info ("=============================================")

	
}
	log.info("Total assertions - "+totalAssertions);
	log.info("Passed assertions - "+assertionPassed);
	log.info("Failed assertions - "+assertionFailed);
}


//fetching values----------------------------------------------------------------

def tc_name=context.expand('${#Global#testCaseName}')
	log.info(tc_name)
	
//def tc_id = context.expand('${#Global#testCaseId}')

log.info(tc_id)

def projectname=testRunner.testCase.testSuite.project.name
def testsuitname=testRunner.testCase.testSuite.name


def myOutFile


//write result-----------------------------------

String filename=Result_Excel_path +"Test_Result.xls";

File fp = new File(filename);
HSSFWorkbook workbook = new HSSFWorkbook(new FileInputStream(fp));
HSSFSheet sheet = workbook.getSheetAt(0);

int totalRows = sheet.getPhysicalNumberOfRows();
log.info("row"+totalRows)

log.info("testresults - "+result)


def String totaltime = testRunner.getTimeTaken()

// Exection time total
def executionTime = totaltime +"ms"
log.info("executionTime" +executionTime)
// Start time
def String startTime = new Date (testRunner.getStartTime())
log.info("start time" +startTime)

//for (int i = 0; i < rows+1; i++) {
	        	HSSFRow row = sheet.getRow(totalRows);
			if (row == null) {
				log.info("row"+row)
				log.info("row"+filename)
								
	        					row = sheet.createRow(totalRows);
								row.createCell((short) 0).setCellValue(projectname);
	        					row.createCell((short) 1).setCellValue(testsuitname);
	        					row.createCell((short) 2).setCellValue(tc_name);
	        					row.createCell((short) 3).setCellValue(tc_id);
								row.createCell((short) 4).setCellValue(result);
								//row.createCell((short) 5).setCellValue(Description);
								row.createCell((short) 5).setCellValue(executionTime);
								row.createCell((short) 6).setCellValue(totalAssertions);
								row.createCell((short) 7).setCellValue(assertionPassed);
								row.createCell((short) 8).setCellValue(assertionFailed);
								
								//row.createCell((short) 7).setCellValue(startTime);
								FileOutputStream fileOut = new FileOutputStream(fp);
	        					workbook.write(fileOut);
								HSSFFont font = workbook.createFont();  
								//font.setColor(HSSFColor.WHITE.index);
								//font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
								font.setFontHeightInPoints((short)10);
								font.setFontName("Calibri");
								
	        					fileOut.close();
			}
//}




==============================================================================================================




===================================== Global preferences ====================================================


con:property>
    <con:name>Result_Excel_path</con:name>
    <con:value>C:\Project_Data\Results\Report\</con:value>
  </con:property>
  <con:property>
    <con:name>Test_Execution_Data_excel_path</con:name>
    <con:value>C:\Project_Data\Results\TestData\Test_Execution_Data\</con:value>
  </con:property>
  <con:property>
    <con:name>Test_data_Excel_path</con:name>
    <con:value>C:\Project_Data\Results\TestData\TestDataExcel\</con:value>
  </con:property>
  <con:property>
    <con:name>flag_for_fail</con:name>
    <con:value>PASS</con:value>
  </con:property>
  <con:property>
    <con:name>endpoint</con:name>
    <con:value>EndPoint_Url</con:value>
  </con:property>
  <con:property>
    <con:name>testCaseId</con:name>
    <con:value xsi:nil="true"/>
  </con:property>
  <con:property>
    <con:name>testCaseName</con:name>
    <con:value xsi:nil="true"/>
  </con:property>

===========================================================================================================




=================================== Test suiote level properties ========================================


<con:properties>
- <con:property>
  <con:name>countryCode</con:name> 
  <con:value>INR</con:value> 
  </con:property>
- <con:property>
  <con:name>currencyCode</con:name> 
  <con:value>QAR</con:value> 
  </con:property>
- <con:property>
  <con:name>accNo</con:name> 
  <con:value>18375219401</con:value> 
  </con:property>
  </con:properties>


=====================================================================================


======================================= Excel required ==============================

Test_Execution_Data


======================================================================================


====================================== Key points to be noted=======================


Location path should be assigned carefully

========================================================================================





